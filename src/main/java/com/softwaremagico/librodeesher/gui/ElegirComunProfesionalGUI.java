/*
 * ElegirComunProfesional.java
 *
 * Created on 15 de enero de 2008, 22:03
 */
package com.softwaremagico.librodeesher.gui;
/*
 * #%L
 * Libro de Esher
 * %%
 * Copyright (C) 2008 - 2012 Softwaremagico
 * %%
 * This software is designed by Jorge Hortelano Otero. Jorge Hortelano Otero
 * <softwaremagico@gmail.com> C/Quart 89, 3. Valencia CP:46008 (Spain).
 *  
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *  
 * You should have received a copy of the GNU General Public License along with
 * this program; If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import com.softwaremagico.librodeesher.Categoria;
import com.softwaremagico.librodeesher.Habilidad;
import com.softwaremagico.librodeesher.Personaje;
import com.softwaremagico.librodeesher.Talento;
import java.awt.Toolkit;

/**
 *
 * @author jorge
 */
public class ElegirComunProfesionalGUI extends javax.swing.JFrame {

    String tipo;
    Categoria cat;
    int maxElegir;
    String cuando;
    String[] listadoHabilidades = null;
    Talento talento = null;

    /**
     * Creates new form ElegirComunProfesional
     */
    public ElegirComunProfesionalGUI(String tmp_tipo, Categoria tmp_cat, int habilidades, String tmp_cuando) {
        tipo = tmp_tipo;
        cat = tmp_cat;
        maxElegir = habilidades;
        cuando = tmp_cuando;
        initComponents();
        setLocation((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - (int) (this.getWidth() / 2),
                (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - (int) (this.getHeight() / 2));
        Inicializar();
    }

    public ElegirComunProfesionalGUI(String tmp_tipo, Categoria tmp_cat, int habilidades, String tmp_cuando, String[] tmp_listadoHabilidades) {
        tipo = tmp_tipo;
        cat = tmp_cat;
        maxElegir = habilidades;
        cuando = tmp_cuando;
        listadoHabilidades = tmp_listadoHabilidades;
        initComponents();
        setLocation((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - (int) (this.getWidth() / 2),
                (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - (int) (this.getHeight() / 2));
        Inicializar();
    }

    public ElegirComunProfesionalGUI(String tmp_tipo, Categoria tmp_cat, int habilidades, Talento tmp_talento) {
        tipo = tmp_tipo;
        cat = tmp_cat;
        maxElegir = habilidades;
        cuando = "talento";
        talento = tmp_talento;
        initComponents();
        setLocation((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - (int) (this.getWidth() / 2),
                (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - (int) (this.getHeight() / 2));
        Inicializar();
    }

    private void Inicializar() {
        TipoCheckBox.setText(tipo);
        ActualizaHabilidadesRestantes();
        CategoriaTextField.setText(cat.DevolverNombre());
        ActualizarHabilidadesComboBox();
        setAlwaysOnTop(true);
    }

    private void ActualizaHabilidadesRestantes() {
        NumeroTextField.setText(maxElegir - Personaje.getInstance().ContarHabilidadesEspeciales(cat, tipo) + "");
    }

    void ActualizarHabilidadesComboBox() {
        HabilidadesComboBox.removeAllItems();
        if (listadoHabilidades == null) {
            try {
                cat.OrdenarHabilidades();
                for (int j = 0; j < cat.listaHabilidades.size(); j++) {
                    Habilidad hab = cat.listaHabilidades.get(j);
                    HabilidadesComboBox.addItem(hab.DevolverNombre());
                }
            } catch (NullPointerException npe) {
            }
        } else {
            for (int j = 0; j < listadoHabilidades.length; j++) {
                HabilidadesComboBox.addItem(listadoHabilidades[j]);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HabilidadesComboBox = new javax.swing.JComboBox();
        TipoCheckBox = new javax.swing.JCheckBox();
        NumeroTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        CategoriaTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Selección de Habilidades Propicias");
        setAlwaysOnTop(true);
        setResizable(false);

        HabilidadesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HabilidadesComboBoxActionPerformed(evt);
            }
        });

        TipoCheckBox.setText("Ok");
        TipoCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        TipoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipoCheckBoxActionPerformed(evt);
            }
        });

        NumeroTextField.setEditable(false);

        jLabel1.setText("Categoria:");

        jLabel2.setText("Habilidad");

        jLabel3.setText("Elegir:");

        CategoriaTextField.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(HabilidadesComboBox, 0, 228, Short.MAX_VALUE)
                            .addComponent(CategoriaTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(NumeroTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(TipoCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CategoriaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NumeroTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(TipoCheckBox)
                    .addComponent(HabilidadesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void TipoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TipoCheckBoxActionPerformed
        Habilidad hab = Personaje.getInstance().DevolverHabilidadDeNombre(HabilidadesComboBox.getSelectedItem().toString());
        if (Personaje.getInstance().ContarHabilidadesEspeciales(cat, tipo) >= maxElegir) {
            TipoCheckBox.setSelected(false);
        }
        if (tipo.equals("Común")) {
            if (TipoCheckBox.isSelected()) {
                if (cuando.equals("profesion")) {
                    hab.HacerComunProfesion();
                }
                if (cuando.equals("raza")) {
                    hab.HacerComunRaza();
                }
                if (cuando.equals("cultura")) {
                    hab.HacerComunCultura();
                }
                if (cuando.equals("adiestramiento")) {
                    hab.HacerComunAdiestramiento();
                }
                if (cuando.equals("talento")) {
                    for (int j = 0; j < talento.bonusCategoria.size(); j++) {
                        if (talento.bonusCategoria.get(j).habilidadComun == true) {
                            talento.bonusCategoria.get(j).habilidadEscogida = hab;
                        }
                    }
                }
            } else {
                if (cuando.equals("profesion")) {
                    hab.NoEsComunProfesion();
                }
                if (cuando.equals("raza")) {
                    hab.NoEsComunRaza();
                }
                if (cuando.equals("cultura")) {
                    hab.NoEsComunCultura();
                }
                if (cuando.equals("adiestramiento")) {
                    hab.NoEsComunAdiestramiento();
                }
                if (cuando.equals("talento")) {
                    for (int j = 0; j < talento.bonusCategoria.size(); j++) {
                        talento.bonusCategoria.get(j).habilidadEscogida = null;
                    }
                }
            }
        }
        if (tipo.equals("Profesional")) {
            if (TipoCheckBox.isSelected()) {
                hab.HacerProfesional();
            } else {
                hab.NoEsProfesional();
            }

        }
        if (tipo.equals("Restringida")) {
            if (TipoCheckBox.isSelected()) {
                hab.HacerRestringida();
            } else {
                hab.NoEsRestringidaRaza();
            }
            TipoCheckBox.setSelected(hab.EsComun());
        }
        ActualizaHabilidadesRestantes();
    }//GEN-LAST:event_TipoCheckBoxActionPerformed

    private void HabilidadesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HabilidadesComboBoxActionPerformed
        Habilidad hab = Personaje.getInstance().DevolverHabilidadDeNombre(HabilidadesComboBox.getSelectedItem().toString());
        if (tipo.equals("Común")) {
            if (cuando.equals("profesion")) {
                TipoCheckBox.setSelected(hab.EsComunProfesion());
            }
            if (cuando.equals("raza")) {
                TipoCheckBox.setSelected(hab.EsComunRaza());
            }
            if (cuando.equals("cultura")) {
                TipoCheckBox.setSelected(hab.EsComunCultura());
            }
        }
        if (tipo.equals("Profesional")) {
            TipoCheckBox.setSelected(hab.EsProfesional());
        }
        if (tipo.equals("Restringida")) {
            TipoCheckBox.setSelected(hab.EsRestringida());
        }
    }//GEN-LAST:event_HabilidadesComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CategoriaTextField;
    private javax.swing.JComboBox HabilidadesComboBox;
    private javax.swing.JTextField NumeroTextField;
    private javax.swing.JCheckBox TipoCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
