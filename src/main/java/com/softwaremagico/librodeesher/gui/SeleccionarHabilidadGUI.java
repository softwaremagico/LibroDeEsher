/*
 * ElegirComunProfesional.java
 *
 * Created on 15 de enero de 2008, 22:03
 */
package com.softwaremagico.librodeesher.gui;
/*
 * #%L
 * Libro de Esher
 * %%
 * Copyright (C) 2008 - 2012 Softwaremagico
 * %%
 * This software is designed by Jorge Hortelano Otero. Jorge Hortelano Otero
 * <softwaremagico@gmail.com> C/Quart 89, 3. Valencia CP:46008 (Spain).
 *  
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *  
 * You should have received a copy of the GNU General Public License along with
 * this program; If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import com.softwaremagico.librodeesher.Categoria;
import com.softwaremagico.librodeesher.Esher;
import com.softwaremagico.librodeesher.Habilidad;
import com.softwaremagico.librodeesher.Personaje;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author  jorge
 */
public class SeleccionarHabilidadGUI extends javax.swing.JFrame {

    Esher esher;
    Habilidad habilidad;
    Categoria cat;
    int maxElegir;
    Personaje pj;
    List<String> listadoHabilidades = new ArrayList<String>();

    /** Creates new form ElegirComunProfesional */
    public SeleccionarHabilidadGUI(Esher tmp_esher) {
        esher = tmp_esher;
        initComponents();
        setLocation((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - (int) (this.getWidth() / 2),
                (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - (int) (this.getHeight() / 2));
        Inicializar();
    }

    public void Refrescar(Habilidad hab, List<String> habilidadesNuevasString, int habilidades, Personaje tmp_pj) {
        habilidad = hab;
        cat = hab.categoriaPadre;
        maxElegir = habilidades;
        pj = tmp_pj;
        listadoHabilidades = habilidadesNuevasString;
        ActualizaHabilidadesRestantes();
        CategoriaTextField.setText(cat.DevolverNombre());
        ActualizarHabilidadesComboBox();
    }

    private void Inicializar() {
        TipoCheckBox.setText("Seleccionar");
    }

    public void ActualizaHabilidadesRestantes() {
        try {
            NumeroTextField.setText(maxElegir - cat.NumeroHabilidadesExistes(habilidad.habilidadesNuevasPosibles) + "");
            if (maxElegir - cat.NumeroHabilidadesExistes(habilidad.habilidadesNuevasPosibles) > 0 || habilidad.categoriaPadre.listaHabilidades.contains(esher.pj.DevolverHabilidadDeNombre(HabilidadesComboBox.getSelectedItem().toString()))) {
                TipoCheckBox.setEnabled(true);
            } else {
                TipoCheckBox.setEnabled(false);
            }
        } catch (NullPointerException npe) {

        }
    }

    public void AñadirEliminarHabilidadSeleccionada() {
        String hab = HabilidadesComboBox.getSelectedItem().toString();
        //Añadimos la habilidad a la categoría.
        if (TipoCheckBox.isSelected()) {
            habilidad.categoriaPadre.AddHabilidad(new Habilidad(habilidad.categoriaPadre, hab));
        } else {
            habilidad.categoriaPadre.BorrarHabilidad(hab);
        }

    }

    public void ActualizarHabilidadesComboBox() {
        HabilidadesComboBox.removeAllItems();
        if (listadoHabilidades == null) {
            try {
                cat.OrdenarHabilidades();
                for (int j = 0; j < cat.listaHabilidades.size(); j++) {
                    Habilidad hab = cat.listaHabilidades.get(j);
                    HabilidadesComboBox.addItem(hab.DevolverNombre());
                }
            } catch (NullPointerException npe) {
            }
        } else {
            for (int j = 0; j < listadoHabilidades.size(); j++) {
                HabilidadesComboBox.addItem(listadoHabilidades.get(j).trim());
            }
        }
    }

    public void addHabilidadesCheckBoxListener(ActionListener al) {
        TipoCheckBox.addActionListener(al);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HabilidadesComboBox = new javax.swing.JComboBox();
        TipoCheckBox = new javax.swing.JCheckBox();
        NumeroTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        CategoriaTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nueva Habilidad Disponible");
        setAlwaysOnTop(true);
        setResizable(false);

        HabilidadesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HabilidadesComboBoxActionPerformed(evt);
            }
        });

        TipoCheckBox.setText("Ok");
        TipoCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        NumeroTextField.setEditable(false);
        NumeroTextField.setToolTipText("Numero de habilidades que pueden ser escogidas.");

        jLabel1.setText("Categoria:");

        jLabel2.setText("Habilidad");

        jLabel3.setText("Elegir:");

        CategoriaTextField.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(HabilidadesComboBox, 0, 228, Short.MAX_VALUE)
                            .addComponent(CategoriaTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TipoCheckBox)
                            .addComponent(jLabel3)
                            .addComponent(NumeroTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CategoriaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NumeroTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(TipoCheckBox)
                    .addComponent(HabilidadesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void HabilidadesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HabilidadesComboBoxActionPerformed
        try {
            Habilidad hab = pj.DevolverHabilidadDeNombre(HabilidadesComboBox.getSelectedItem().toString());
            if (habilidad.categoriaPadre.listaHabilidades.contains(hab)) {
                TipoCheckBox.setSelected(true);
            } else {
                TipoCheckBox.setSelected(false);
            }
        } catch (NullPointerException npe) {
        }
        ActualizaHabilidadesRestantes();
    }//GEN-LAST:event_HabilidadesComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CategoriaTextField;
    private javax.swing.JComboBox HabilidadesComboBox;
    private javax.swing.JTextField NumeroTextField;
    private javax.swing.JCheckBox TipoCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
